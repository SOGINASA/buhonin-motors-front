import React, { useState } from 'react';
import { useQuery, useMutation, useQueryClient } from 'react-query';
import api from '../../services/api';
import { useAuth } from '../../hooks/auth/useAuth';
import LoadingSpinner from '../../components/UI/LoadingSpinner';

const SettingsPage = () => {
  const [activeTab, setActiveTab] = useState('notifications');
  const [passwordData, setPasswordData] = useState({
    current_password: '',
    new_password: '',
    confirm_password: ''
  });
  const [errors, setErrors] = useState({});
  const { user } = useAuth();
  const queryClient = useQueryClient();

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { data: settings, isLoading } = useQuery(
    'user-settings',
    () => api.get('/api/users/settings')
  );

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const { data: notificationSettings } = useQuery(
    'notification-settings',
    () => api.get('/api/notifications/settings')
  );

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const updateSettingsMutation = useMutation(
    (data) => api.put('/api/users/settings', data),
    {
      onSuccess: () => {
        queryClient.invalidateQueries('user-settings');
        alert('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
      },
      onError: (error) => {
        alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + (error.response?.data?.message || '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'));
      }
    }
  );

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
  const changePasswordMutation = useMutation(
    (data) => api.post('/api/users/change-password', data),
    {
      onSuccess: () => {
        setPasswordData({ current_password: '', new_password: '', confirm_password: '' });
        setErrors({});
        alert('–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω');
      },
      onError: (error) => {
        setErrors({ password: error.response?.data?.message || '–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è' });
      }
    }
  );

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const updateNotificationsMutation = useMutation(
    (data) => api.put('/api/notifications/settings', data),
    {
      onSuccess: () => {
        queryClient.invalidateQueries('notification-settings');
        alert('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
      },
      onError: (error) => {
        alert('–û—à–∏–±–∫–∞: ' + (error.response?.data?.message || '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'));
      }
    }
  );

  const handleSettingChange = (field, value) => {
    const updatedSettings = {
      ...settings?.data,
      [field]: value
    };
    updateSettingsMutation.mutate(updatedSettings);
  };

  const handleNotificationChange = (type, channel, enabled) => {
    const updatedSettings = {
      ...notificationSettings?.data,
      [type]: {
        ...notificationSettings?.data?.[type],
        [channel]: enabled
      }
    };
    updateNotificationsMutation.mutate(updatedSettings);
  };

  const handlePasswordChange = (field, value) => {
    setPasswordData(prev => ({ ...prev, [field]: value }));
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }
  };

  const handlePasswordSubmit = () => {
    const newErrors = {};
    
    if (!passwordData.current_password) {
      newErrors.current_password = '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å';
    }
    if (!passwordData.new_password) {
      newErrors.new_password = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å';
    } else if (passwordData.new_password.length < 6) {
      newErrors.new_password = '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤';
    }
    if (passwordData.new_password !== passwordData.confirm_password) {
      newErrors.confirm_password = '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç';
    }

    if (Object.keys(newErrors).length > 0) {
      setErrors(newErrors);
      return;
    }

    changePasswordMutation.mutate({
      current_password: passwordData.current_password,
      new_password: passwordData.new_password
    });
  };

  if (isLoading) return <LoadingSpinner text="–ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏..." />;

  const settingsData = settings?.data || {};
  const notificationsData = notificationSettings?.data || {};

  const tabs = [
    { id: 'notifications', name: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', icon: 'üîî' },
    { id: 'privacy', name: '–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å', icon: 'üîí' },
    { id: 'account', name: '–ê–∫–∫–∞—É–Ω—Ç', icon: 'üë§' },
    { id: 'security', name: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', icon: 'üõ°Ô∏è' }
  ];

  return (
    <div style={{ maxWidth: '800px', margin: '0 auto' }}>
      <h1 style={{ marginBottom: '30px' }}>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</h1>

      <div style={{ display: 'flex', gap: '30px' }}>
        {/* –ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é */}
        <div style={{
          width: '200px',
          backgroundColor: 'white',
          borderRadius: '8px',
          border: '1px solid #ddd',
          padding: '10px',
          height: 'fit-content'
        }}>
          {tabs.map(tab => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id)}
              style={{
                width: '100%',
                padding: '12px 15px',
                backgroundColor: activeTab === tab.id ? '#007bff' : 'transparent',
                color: activeTab === tab.id ? 'white' : '#333',
                border: 'none',
                borderRadius: '4px',
                cursor: 'pointer',
                textAlign: 'left',
                marginBottom: '5px',
                display: 'flex',
                alignItems: 'center',
                gap: '10px'
              }}
            >
              <span>{tab.icon}</span>
              <span>{tab.name}</span>
            </button>
          ))}
        </div>

        {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–æ–∫ */}
        <div style={{
          flex: 1,
          backgroundColor: 'white',
          borderRadius: '8px',
          border: '1px solid #ddd',
          padding: '20px'
        }}>
          {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
          {activeTab === 'notifications' && (
            <div>
              <h2 style={{ marginTop: 0 }}>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h2>
              
              <div style={{ marginBottom: '30px' }}>
                <h3>–û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
                <div style={{ display: 'flex', flexDirection: 'column', gap: '15px' }}>
                  <label style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>
                    <input
                      type="checkbox"
                      checked={settingsData.notifications_enabled !== false}
                      onChange={(e) => handleSettingChange('notifications_enabled', e.target.checked)}
                    />
                    <span>–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</span>
                  </label>
                  
                  <label style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>
                    <input
                      type="checkbox"
                      checked={settingsData.email_notifications !== false}
                      onChange={(e) => handleSettingChange('email_notifications', e.target.checked)}
                    />
                    <span>Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</span>
                  </label>
                  
                  <label style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>
                    <input
                      type="checkbox"
                      checked={settingsData.push_notifications !== false}
                      onChange={(e) => handleSettingChange('push_notifications', e.target.checked)}
                    />
                    <span>Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</span>
                  </label>
                  
                  <label style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>
                    <input
                      type="checkbox"
                      checked={settingsData.sms_notifications === true}
                      onChange={(e) => handleSettingChange('sms_notifications', e.target.checked)}
                    />
                    <span>SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</span>
                  </label>
                </div>
              </div>

              <div>
                <h3>–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h3>
                <div style={{ display: 'flex', flexDirection: 'column', gap: '20px' }}>
                  {[
                    { key: 'new_messages', name: '–ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è' },
                    { key: 'favorites_updates', name: '–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ' },
                    { key: 'price_changes', name: '–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω' },
                    { key: 'similar_listings', name: '–ü–æ—Ö–æ–∂–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è' },
                    { key: 'promotions', name: '–ê–∫—Ü–∏–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è' }
                  ].map(type => (
                    <div key={type.key} style={{
                      padding: '15px',
                      border: '1px solid #eee',
                      borderRadius: '4px'
                    }}>
                      <div style={{ fontWeight: 'bold', marginBottom: '10px' }}>
                        {type.name}
                      </div>
                      <div style={{ display: 'flex', gap: '15px' }}>
                        <label style={{ display: 'flex', alignItems: 'center', gap: '5px' }}>
                          <input
                            type="checkbox"
                            checked={notificationsData[type.key]?.email !== false}
                            onChange={(e) => handleNotificationChange(type.key, 'email', e.target.checked)}
                          />
                          <span>Email</span>
                        </label>
                        <label style={{ display: 'flex', alignItems: 'center', gap: '5px' }}>
                          <input
                            type="checkbox"
                            checked={notificationsData[type.key]?.push !== false}
                            onChange={(e) => handleNotificationChange(type.key, 'push', e.target.checked)}
                          />
                          <span>Push</span>
                        </label>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}

          {/* –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å */}
          {activeTab === 'privacy' && (
            <div>
              <h2 style={{ marginTop: 0 }}>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏</h2>
              
              <div style={{ display: 'flex', flexDirection: 'column', gap: '20px' }}>
                <div style={{
                  padding: '15px',
                  border: '1px solid #eee',
                  borderRadius: '4px'
                }}>
                  <h3 style={{ marginTop: 0 }}>–í–∏–¥–∏–º–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è</h3>
                  <label style={{ display: 'flex', alignItems: 'center', gap: '10px', marginBottom: '10px' }}>
                    <input
                      type="checkbox"
                      checked={settingsData.show_phone_in_profile !== false}
                      onChange={(e) => handleSettingChange('show_phone_in_profile', e.target.checked)}
                    />
                    <span>–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–µ</span>
                  </label>
                  <label style={{ display: 'flex', alignItems: 'center', gap: '10px', marginBottom: '10px' }}>
                    <input
                      type="checkbox"
                      checked={settingsData.show_email_in_profile !== false}
                      onChange={(e) => handleSettingChange('show_email_in_profile', e.target.checked)}
                    />
                    <span>–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å email –≤ –ø—Ä–æ—Ñ–∏–ª–µ</span>
                  </label>
                  <label style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>
                    <input
                      type="checkbox"
                      checked={settingsData.show_online_status !== false}
                      onChange={(e) => handleSettingChange('show_online_status', e.target.checked)}
                    />
                    <span>–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å "–æ–Ω–ª–∞–π–Ω"</span>
                  </label>
                </div>

                <div style={{
                  padding: '15px',
                  border: '1px solid #eee',
                  borderRadius: '4px'
                }}>
                  <h3 style={{ marginTop: 0 }}>–ö–æ–Ω—Ç–∞–∫—Ç—ã</h3>
                  <label style={{ display: 'flex', alignItems: 'center', gap: '10px', marginBottom: '10px' }}>
                    <input
                      type="checkbox"
                      checked={settingsData.allow_contact_from_anyone !== false}
                      onChange={(e) => handleSettingChange('allow_contact_from_anyone', e.target.checked)}
                    />
                    <span>–†–∞–∑—Ä–µ—à–∏—Ç—å —Å–≤—è–∑—ã–≤–∞—Ç—å—Å—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º</span>
                  </label>
                  <label style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>
                    <input
                      type="checkbox"
                      checked={settingsData.hide_from_search === true}
                      onChange={(e) => handleSettingChange('hide_from_search', e.target.checked)}
                    />
                    <span>–°–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ –ø–æ–∏—Å–∫–∞</span>
                  </label>
                </div>
              </div>
            </div>
          )}

          {/* –ê–∫–∫–∞—É–Ω—Ç */}
          {activeTab === 'account' && (
            <div>
              <h2 style={{ marginTop: 0 }}>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞</h2>
              
              <div style={{ display: 'flex', flexDirection: 'column', gap: '20px' }}>
                <div>
                  <h3>–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞</h3>
                  <select
                    value={settingsData.preferred_language || 'ru'}
                    onChange={(e) => handleSettingChange('preferred_language', e.target.value)}
                    style={{
                      padding: '8px',
                      border: '1px solid #ddd',
                      borderRadius: '4px',
                      width: '200px'
                    }}
                  >
                    <option value="ru">–†—É—Å—Å–∫–∏–π</option>
                    <option value="kk">–ö–∞–∑–∞—Ö—Å–∫–∏–π</option>
                    <option value="en">English</option>
                  </select>
                </div>

                <div>
                  <h3>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å</h3>
                  <select
                    value={settingsData.timezone || 'Asia/Almaty'}
                    onChange={(e) => handleSettingChange('timezone', e.target.value)}
                    style={{
                      padding: '8px',
                      border: '1px solid #ddd',
                      borderRadius: '4px',
                      width: '200px'
                    }}
                  >
                    <option value="Asia/Almaty">–ê–ª–º–∞—Ç—ã (UTC+6)</option>
                    <option value="Asia/Aqtobe">–ê–∫—Ç–æ–±–µ (UTC+5)</option>
                    <option value="Europe/Moscow">–ú–æ—Å–∫–≤–∞ (UTC+3)</option>
                    <option value="Europe/Kiev">–ö–∏–µ–≤ (UTC+2)</option>
                  </select>
                </div>

                <div>
                  <h3>–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π</h3>
                  <label style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>
                    <input
                      type="checkbox"
                      checked={settingsData.auto_renewal_enabled === true}
                      onChange={(e) => handleSettingChange('auto_renewal_enabled', e.target.checked)}
                    />
                    <span>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è</span>
                  </label>
                </div>
              </div>
            </div>
          )}

          {/* –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å */}
          {activeTab === 'security' && (
            <div>
              <h2 style={{ marginTop: 0 }}>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</h2>
              
              <div style={{ marginBottom: '30px' }}>
                <h3>–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è</h3>
                {errors.password && (
                  <div style={{
                    backgroundColor: '#f8d7da',
                    color: '#721c24',
                    padding: '10px',
                    borderRadius: '4px',
                    marginBottom: '15px',
                    border: '1px solid #f5c6cb'
                  }}>
                    {errors.password}
                  </div>
                )}
                
                <div style={{ display: 'flex', flexDirection: 'column', gap: '15px', maxWidth: '300px' }}>
                  <div>
                    <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>
                      –¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
                    </label>
                    <input
                      type="password"
                      value={passwordData.current_password}
                      onChange={(e) => handlePasswordChange('current_password', e.target.value)}
                      style={{
                        width: '100%',
                        padding: '8px',
                        border: `1px solid ${errors.current_password ? '#dc3545' : '#ddd'}`,
                        borderRadius: '4px',
                        boxSizing: 'border-box'
                      }}
                    />
                    {errors.current_password && (
                      <div style={{ color: '#dc3545', fontSize: '14px', marginTop: '5px' }}>
                        {errors.current_password}
                      </div>
                    )}
                  </div>

                  <div>
                    <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>
                      –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
                    </label>
                    <input
                      type="password"
                      value={passwordData.new_password}
                      onChange={(e) => handlePasswordChange('new_password', e.target.value)}
                      style={{
                        width: '100%',
                        padding: '8px',
                        border: `1px solid ${errors.new_password ? '#dc3545' : '#ddd'}`,
                        borderRadius: '4px',
                        boxSizing: 'border-box'
                      }}
                    />
                    {errors.new_password && (
                      <div style={{ color: '#dc3545', fontSize: '14px', marginTop: '5px' }}>
                        {errors.new_password}
                      </div>
                    )}
                  </div>

                  <div>
                    <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>
                      –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
                    </label>
                    <input
                      type="password"
                      value={passwordData.confirm_password}
                      onChange={(e) => handlePasswordChange('confirm_password', e.target.value)}
                      style={{
                        width: '100%',
                        padding: '8px',
                        border: `1px solid ${errors.confirm_password ? '#dc3545' : '#ddd'}`,
                        borderRadius: '4px',
                        boxSizing: 'border-box'
                      }}
                    />
                    {errors.confirm_password && (
                      <div style={{ color: '#dc3545', fontSize: '14px', marginTop: '5px' }}>
                        {errors.confirm_password}
                      </div>
                    )}
                  </div>

                  <button
                    onClick={handlePasswordSubmit}
                    disabled={changePasswordMutation.isLoading}
                    style={{
                      padding: '10px 20px',
                      backgroundColor: changePasswordMutation.isLoading ? '#6c757d' : '#007bff',
                      color: 'white',
                      border: 'none',
                      borderRadius: '4px',
                      cursor: changePasswordMutation.isLoading ? 'not-allowed' : 'pointer'
                    }}
                  >
                    {changePasswordMutation.isLoading ? '–ò–∑–º–µ–Ω–µ–Ω–∏–µ...' : '–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å'}
                  </button>
                </div>
              </div>

              <div style={{ marginBottom: '30px' }}>
                <h3>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏</h3>
                <p style={{ color: '#666', marginBottom: '15px' }}>
                  –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏–∏ –Ω–∞ –¥—Ä—É–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                </p>
                <div style={{
                  padding: '15px',
                  border: '1px solid #eee',
                  borderRadius: '4px',
                  marginBottom: '10px'
                }}>
                  <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                    <div>
                      <div style={{ fontWeight: 'bold' }}>–¢–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ</div>
                      <div style={{ fontSize: '14px', color: '#666' }}>
                        {navigator.userAgent.includes('Chrome') ? 'üåê Chrome' : 
                         navigator.userAgent.includes('Firefox') ? 'ü¶ä Firefox' : 
                         navigator.userAgent.includes('Safari') ? 'üß≠ Safari' : 'üíª –ë—Ä–∞—É–∑–µ—Ä'}
                        {' ‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∞ —Å–µ–π—á–∞—Å'}
                      </div>
                    </div>
                    <div style={{
                      padding: '4px 8px',
                      backgroundColor: '#28a745',
                      color: 'white',
                      borderRadius: '4px',
                      fontSize: '12px'
                    }}>
                      –¢–µ–∫—É—â–∞—è
                    </div>
                  </div>
                </div>
                
                <button
                  style={{
                    padding: '8px 16px',
                    backgroundColor: '#dc3545',
                    color: 'white',
                    border: 'none',
                    borderRadius: '4px',
                    cursor: 'pointer',
                    fontSize: '14px'
                  }}
                  onClick={() => {
                    if (window.confirm('–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ—Å—Å–∏–∏? –í–∞–º –ø—Ä–∏–¥–µ—Ç—Å—è –≤–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ –Ω–∞ –¥—Ä—É–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö.')) {
                      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–π
                      alert('–°–µ—Å—Å–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
                    }
                  }}
                >
                  –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ—Å—Å–∏–∏
                </button>
              </div>

              <div>
                <h3>–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞</h3>
                <p style={{ color: '#666', marginBottom: '15px' }}>
                  –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ. –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.
                </p>
                <button
                  style={{
                    padding: '10px 20px',
                    backgroundColor: '#dc3545',
                    color: 'white',
                    border: 'none',
                    borderRadius: '4px',
                    cursor: 'pointer'
                  }}
                  onClick={() => {
                    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!')) {
                      if (window.confirm('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞. –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ!')) {
                        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
                        alert('–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
                      }
                    }
                  }}
                >
                  üóë –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default SettingsPage;